--[[

__________            .__  __  .__        ___ ___  ____ _____________ 
\____    /____   ____ |__|/  |_|  |__    /   |   \|    |   \______   \
  /     // __ \ /    \|  \   __\  |  \  /    ~    \    |   /|    |  _/
 /     /\  ___/|   |  \  ||  | |   Y  \ \    Y    /    |  / |    |   \
/_______ \___  >___|  /__||__| |___|  /  \___|_  /|______/  |______  /
        \/   \/     \/              \/         \/                  \/ 
- Script made by mituma | Zenith HUB
]]--

-- Instances:

local HttpSpy = Instance.new("ScreenGui")
local Background = Instance.new("Frame")
local TitleText = Instance.new("TextLabel")
local MainContainer = Instance.new("ScrollingFrame")
local TemplateText = Instance.new("TextLabel")
local UIListLayout = Instance.new("UIListLayout")

--Properties:

HttpSpy.Name = "Nightmare hub"
HttpSpy.Parent = game.CoreGui
HttpSpy.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local scaleFactor = 1.2 -- Scale factor to make the UI 20% bigger

Background.Name = "Background"
Background.Parent = HttpSpy
Background.Active = true
Background.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
Background.BorderColor3 = Color3.fromRGB(255, 0, 4)
Background.BorderSizePixel = 2
Background.Position = UDim2.new(0.0586419739, 0, 0.24924925, 0)
Background.Size = UDim2.new(0, 406 * scaleFactor, 0, 222 * scaleFactor)

TitleText.Name = "TitleText"
TitleText.Parent = Background
TitleText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TitleText.BackgroundTransparency = 1.000
TitleText.BorderSizePixel = 0
TitleText.Size = UDim2.new(0, 406 * scaleFactor, 0, 25 * scaleFactor)
TitleText.Font = Enum.Font.RobotoMono
TitleText.Text = "HTTP Spy v. 1"
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.TextScaled = true
TitleText.TextSize = 14.000
TitleText.TextWrapped = true

MainContainer.Name = "MainContainer"
MainContainer.Parent = Background
MainContainer.Active = true
MainContainer.BackgroundColor3 = Color3.fromRGB(46, 46, 46)
MainContainer.BorderSizePixel = 0
MainContainer.Position = UDim2.new(0, 0, 0.112612613, 0)
MainContainer.Size = UDim2.new(0, 406 * scaleFactor, 0, 197 * scaleFactor)
MainContainer.ScrollBarThickness = 6

UIListLayout.Parent = MainContainer
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

function drag(s)
    script.Parent = s
    script.Parent.Position = UDim2.new(0, script.Parent.Parent.AbsoluteSize.X * script.Parent.Position.X.Scale + script.Parent.Position.X.Offset, 0, script.Parent.Parent.AbsoluteSize.Y * script.Parent.Position.Y.Scale + script.Parent.Position.Y.Offset)
    local i = false
    script.Parent.MouseEnter:Connect(function()
        i = true
    end)
    script.Parent.MouseLeave:Connect(function()
        i = false
    end)
    local uis = game:GetService("UserInputService")
    local up = false
    local m = game:GetService("Players").LocalPlayer:GetMouse()

    uis.InputBegan:Connect(function(key)
        if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
            up = false
            local offsetX = m.X - script.Parent.Position.X.Offset
            local offsetY = m.Y - script.Parent.Position.Y.Offset
            if i then
                repeat
                    warn("BRRRRR")
                    s:TweenPosition(UDim2.new(0, m.X - offsetX, 0, m.Y - offsetY), 'Out', 'Sine', 0.4, true)
                    wait()
                until up
                offsetX = 0
                offsetY = 0
            end
        end
    end)
    uis.InputEnded:Connect(function(key)
        if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
            up = true
        end
    end)
end

drag(Background)

local script = Instance.new('LocalScript', MainContainer)

TemplateText.Name = "TemplateText"
TemplateText.Parent = HttpSpy.Background.MainContainer.LocalScript
TemplateText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TemplateText.BackgroundTransparency = 0.950
TemplateText.BorderSizePixel = 0
TemplateText.Position = UDim2.new(3.75832236e-08, 0, 0, 0)
TemplateText.Size = UDim2.new(1.00000012, 0, 0, 20 * scaleFactor)
TemplateText.Font = Enum.Font.SourceSansSemibold
TemplateText.Text = "ur mom"
TemplateText.TextColor3 = Color3.fromRGB(255, 255, 255)
TemplateText.TextScaled = true
TemplateText.TextSize = 14.000
TemplateText.TextWrapped = true
TemplateText.TextXAlignment = Enum.TextXAlignment.Left

local Template = script.TemplateText

local function registerDynamicScrollingFrame(frame)
    local layout = frame:FindFirstChildWhichIsA("UIListLayout")
    local absoluteContentSize = layout.AbsoluteContentSize
    frame.CanvasSize = UDim2.new(0, 0, 0, absoluteContentSize.Y)
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        local absoluteContentSize = layout.AbsoluteContentSize
        frame.CanvasSize = UDim2.new(0, 0, 0, absoluteContentSize.Y)
    end)
end

local function Log(text, headers)
    local Label = Template:Clone()
    if headers and type(headers) == "table" then
        text = text .. " (HEADERS:"
        for Index, Value in next, headers do
            text = text .. tostring(Index) .. ": " .. tostring(Value)
        end
        text = text .. ")"
    end
    Label.Text = text
    Label.Parent = script.Parent
end

registerDynamicScrollingFrame(MainContainer)

local HttpGet
HttpGet = hookfunction(game.HttpGet, function(self, url, ...)
    Log("Http Get Request from: " .. url)
    return HttpGet(self, url, ...)
end)

local HttpPost
HttpPost = hookfunction(game.HttpPost, function(self, url, ...)
    Log("Http Post Request from: " .. url)
    return HttpPost(self, url, ...)
end)

local RequestLog

if syn.request then
    RequestLog = hookfunction(syn.request, function(dat)
        Log("syn.request from: " .. dat.Url .. " (" .. dat.Method .. ")", dat.Headers)
        return RequestLog(dat)
    end)
elseif request then
    RequestLog = hookfunction(request, function(dat)
        Log("syn.request from: " .. dat.Url .. " (" .. dat.Method .. ")", dat.Headers)
        return RequestLog(dat)
    end)
else
    error("YOUR EXPLOIT IS NOT SUPPORTED!")
end
